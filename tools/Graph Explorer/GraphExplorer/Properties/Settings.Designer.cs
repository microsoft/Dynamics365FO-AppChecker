//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GraphExplorer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.10.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("neo4j")]
        public string Username {
            get {
                return ((string)(this["Username"]));
            }
            set {
                this["Username"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Consolas")]
        public string QueryFont {
            get {
                return ((string)(this["QueryFont"]));
            }
            set {
                this["QueryFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("7687")]
        public int Port {
            get {
                return ((int)(this["Port"]));
            }
            set {
                this["Port"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("localhost")]
        public string Server {
            get {
                return ((string)(this["Server"]));
            }
            set {
                this["Server"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Graph Explorer")]
        public string AppTitle {
            get {
                return ((string)(this["AppTitle"]));
            }
            set {
                this["AppTitle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ConnectResultNodes {
            get {
                return ((bool)(this["ConnectResultNodes"]));
            }
            set {
                this["ConnectResultNodes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int SourceFontSize {
            get {
                return ((int)(this["SourceFontSize"]));
            }
            set {
                this["SourceFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Consolas")]
        public string SourceFont {
            get {
                return ((string)(this["SourceFont"]));
            }
            set {
                this["SourceFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int TextResultsFontSize {
            get {
                return ((int)(this["TextResultsFontSize"]));
            }
            set {
                this["TextResultsFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ShowLineNumbers {
            get {
                return ((bool)(this["ShowLineNumbers"]));
            }
            set {
                this["ShowLineNumbers"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool DarkMode {
            get {
                return ((bool)(this["DarkMode"]));
            }
            set {
                this["DarkMode"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string SourceFileDirectory {
            get {
                return ((string)(this["SourceFileDirectory"]));
            }
            set {
                this["SourceFileDirectory"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ShowNavigationButtons {
            get {
                return ((bool)(this["ShowNavigationButtons"]));
            }
            set {
                this["ShowNavigationButtons"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AllowKeyboardNavigation {
            get {
                return ((bool)(this["AllowKeyboardNavigation"]));
            }
            set {
                this["AllowKeyboardNavigation"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("function graphSurfaceDefaultBackgroundColor() {\r\n    return \'white\';\r\n}\r\n\r\nfuncti" +
            "on graphSurfaceDefaultForegroundColor() {\r\n    return \'darkgray\';\r\n}\r\n\r\nfunction" +
            " createGraphNode(node) {\r\n    if (node.Labels[0] == \'Class\') {\r\n        var imag" +
            "e = \"Resources/Class_16x.svg\";\r\n        return { id: node.Id, value: node.Proper" +
            "ties.WMC, label: node.Properties.Name, title: node.Properties.$indegree, color: " +
            "\"red\", shape: \'image\', \'image\': image }\r\n    }\r\n    else if (node.Labels[0] == \'" +
            "Interface\') {\r\n        var image = \"Resources/Interface_16x.svg\";\r\n        retur" +
            "n { id: node.Id, label: node.Properties.Name, title: node.Properties.Name, shape" +
            ": \'image\', \'image\': image }\r\n    }\r\n    else if (node.Labels[0] == \'Method\') {\r\n" +
            "        // Find the correct image to use, depending on the method visibility\r\n  " +
            "      var image = \"Method_16x.svg\";\r\n        if (node.Properties.Visibility == \'" +
            "private\')\r\n            image = \"MethodPrivate_16x.svg\";\r\n        else if (node.P" +
            "roperties.Visibility == \'protected\')\r\n            image = \"MethodProtect_16x.svg" +
            "\";\r\n        else if (node.Properties.Visibility == \'internal\')\r\n            imag" +
            "e = \"MethodFriend_16x.svg\";\r\n        else if (node.Properties.Visibility == \'fin" +
            "al\')\r\n            image = \"MethodSealed_16x.svg\";\r\n        return { id: node.Id," +
            " value: node.Properties.LOC, label: node.Properties.Name, title: \'Method \'+ node" +
            ".Properties.Name, shape: \'image\', image: \'Resources/\' + image, color: \"green\" }\r" +
            "\n    }\r\n    return { id: node.Id, label: node.Properties.Name, title: node.Prope" +
            "rties.Name };\r\n}\r\n\r\nfunction createGraphEdge(edge) {\r\n    if (edge.Type == \'CALL" +
            "S\') {\r\n        return { id: edge.Id, from: edge.From, to: edge.To, value: edge.P" +
            "roperties.Count, label: edge.Type, title: \'Calls: \' + edge.Properties.Count, col" +
            "or: {color: \'darkgrey\'}};\r\n    }\r\n    else {\r\n        return { id: edge.Id, from" +
            ": edge.From, to: edge.To, label: edge.Type };\r\n    }\r\n}\r\n")]
        public string Configuration {
            get {
                return ((string)(this["Configuration"]));
            }
            set {
                this["Configuration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("12")]
        public int QueryFontSize {
            get {
                return ((int)(this["QueryFontSize"]));
            }
            set {
                this["QueryFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double ToolWindowWidth {
            get {
                return ((double)(this["ToolWindowWidth"]));
            }
            set {
                this["ToolWindowWidth"] = value;
            }
        }
    }
}
