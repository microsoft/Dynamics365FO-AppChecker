<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="GraphExplorer.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <startup>
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
    </startup>
    <userSettings>
        <GraphExplorer.Properties.Settings>
            <setting name="Username" serializeAs="String">
                <value>neo4j</value>
            </setting>
            <setting name="QueryFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="QueryFont" serializeAs="String">
                <value>Consolas</value>
            </setting>
            <setting name="Port" serializeAs="String">
                <value>7687</value>
            </setting>
            <setting name="Server" serializeAs="String">
                <value>localhost</value>
            </setting>
            <setting name="AppTitle" serializeAs="String">
                <value>Graph Explorer</value>
            </setting>
            <setting name="ConnectResultNodes" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="SourceFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="SourceFont" serializeAs="String">
                <value>Consolas</value>
            </setting>
            <setting name="TextResultsFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="ShowLineNumbers" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="DarkMode" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="SourceFileDirectory" serializeAs="String">
                <value />
            </setting>
            <setting name="ShowNavigationButtons" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="AllowKeyboardNavigation" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="Configuration" serializeAs="String">
                <value>function graphSurfaceDefaultBackgroundColor() {
    return 'white';
}

function graphSurfaceDefaultForegroundColor() {
    return 'darkgray';
}

function createGraphNode(node) {
    if (node.Labels[0] == 'Class') {
        var image = "Resources/Class_16x.svg";
        return { id: node.Id, value: node.Properties.WMC, label: node.Properties.Name, title: node.Properties.$indegree, color: "red", shape: 'image', 'image': image }
    }
    else if (node.Labels[0] == 'Interface') {
        var image = "Resources/Interface_16x.svg";
        return { id: node.Id, label: node.Properties.Name, title: node.Properties.Name, shape: 'image', 'image': image }
    }
    else if (node.Labels[0] == 'Method') {
        // Find the correct image to use, depending on the method visibility
        var image = "Method_16x.svg";
        if (node.Properties.Visibility == 'private')
            image = "MethodPrivate_16x.svg";
        else if (node.Properties.Visibility == 'protected')
            image = "MethodProtect_16x.svg";
        else if (node.Properties.Visibility == 'internal')
            image = "MethodFriend_16x.svg";
        else if (node.Properties.Visibility == 'final')
            image = "MethodSealed_16x.svg";
        return { id: node.Id, value: node.Properties.LOC, label: node.Properties.Name, title: 'Method '+ node.Properties.Name, shape: 'image', image: 'Resources/' + image, color: "green" }
    }
    return { id: node.Id, label: node.Properties.Name, title: node.Properties.Name };
}

function createGraphEdge(edge) {
    if (edge.Type == 'CALLS') {
        return { id: edge.Id, from: edge.From, to: edge.To, value: edge.Properties.Count, label: edge.Type, title: 'Calls: ' + edge.Properties.Count, color: {color: 'darkgrey'}};
    }
    else {
        return { id: edge.Id, from: edge.From, to: edge.To, label: edge.Type };
    }
}
</value>
            </setting>
        </GraphExplorer.Properties.Settings>
    </userSettings>
</configuration>