<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="SocratexGraphExplorer.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <startup>
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
    </startup>
    <userSettings>
        <SocratexGraphExplorer.Properties.Settings>
            <setting name="Username" serializeAs="String">
                <value>neo4j</value>
            </setting>
            <setting name="QueryFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="QueryFont" serializeAs="String">
                <value>Consolas</value>
            </setting>
            <setting name="Port" serializeAs="String">
                <value>7687</value>
            </setting>
            <setting name="Server" serializeAs="String">
                <value>localhost</value>
            </setting>
            <setting name="AppTitle" serializeAs="String">
                <value>Graph Explorer</value>
            </setting>
            <setting name="ConnectResultNodes" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="SourceFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="SourceFont" serializeAs="String">
                <value>Consolas</value>
            </setting>
            <setting name="TextResultsFontSize" serializeAs="String">
                <value>12</value>
            </setting>
            <setting name="ShowLineNumbers" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="Configuration" serializeAs="String">
                <value>function graphSurfaceDefaultBackgroundColor() {
    return 'white';
}

function graphSurfaceDefaultForegroundColor() {
    return 'darkgray';
}

function createGraphNode(node) {
    if (node.labels[0] == 'Class') {
        var image = "Resources/Class_16x.svg";
        return { id: node.id, value: node.properties.WMC, label: node.properties.Name, title: node.properties.$indegree, color: "red", shape: 'image', 'image': image }
    }
    else if (node.labels[0] == 'Interface') {
        var image = "Resources/Interface_16x.svg";
        return { id: node.id, label: node.properties.Name, title: node.properties.Name, shape: 'image', 'image': image }
    }
    else if (node.labels[0] == 'Method') {
        // Find the correct image to use, depending on the method visibility
        var image = "Method_16x.svg";
        if (node.properties.Visibility == 'private')
            image = "MethodPrivate_16x.svg";
        else if (node.properties.Visibility == 'protected')
            image = "MethodProtect_16x.svg";
        else if (node.properties.Visibility == 'internal')
            image = "MethodFriend_16x.svg";
        else if (node.properties.Visibility == 'final')
            image = "MethodSealed_16x.svg";
        return { id: node.id, value: node.properties.LOC, label: node.properties.Name, title: 'Method '+ node.properties.Name, shape: 'image', image: 'Resources/' + image, color: "green" }
    }
    return { id: node.id, label: node.properties.Name, title: node.properties.Name };
}

function createGraphEdge(edge) {
    if (edge.type == 'CALLS') {
        return { id: edge.id, from: edge.from, to: edge.to, value: edge.properties.Count, label: edge.type, title: 'Calls: ' + edge.properties.Count, color: {color: 'darkgrey'}};
    }
    else {
        return { id: edge.id, from: edge.from, to: edge.to, label: edge.type };
    }
}

function options() {
    return {
        interaction: { hover: true, selectConnectedEdges: false },
        manipulation: {
            enabled: false, // true enables adding nodes to the graph
        },
        nodes: {
            size: 10, // For nodes that do not have specific size or where no value attribute is provided
            font: { strokeWidth: 2 }, // This is the amount of space around the text in nodes or edges.
            shape: 'dot',
            scaling: {
                min: 10, max: 30,
                label: { // Make sure font size is in this range.
                    min: 8, max: 24
                }
            }
        },
        edges: {
            arrows: "to",
            shadow: false,
            smooth: true,
            scaling: {
            min: 2, 'max': 12, 'label': { 'enabled': true, 'min': 9, 'max': 14}
            }
        }
    }
}</value>
            </setting>
            <setting name="DarkMode" serializeAs="String">
                <value>False</value>
            </setting>
        </SocratexGraphExplorer.Properties.Settings>
    </userSettings>
</configuration>